// <auto-generated />
using GolfCompanion.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GolfCompanion.Migrations
{
    [DbContext(typeof(GolfDbContext))]
    [Migration("20250716185523_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.7");

            modelBuilder.Entity("GolfCompanion.Models.Club", b =>
                {
                    b.Property<int>("ClubId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("ClubDistance")
                        .HasColumnType("REAL");

                    b.Property<string>("ClubName")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ClubId");

                    b.HasIndex("UserId");

                    b.ToTable("Clubs");

                    b.HasData(
                        new
                        {
                            ClubId = 1,
                            ClubDistance = 270.0,
                            ClubName = "Dr",
                            UserId = 1
                        },
                        new
                        {
                            ClubId = 2,
                            ClubDistance = 240.0,
                            ClubName = "3w",
                            UserId = 1
                        },
                        new
                        {
                            ClubId = 3,
                            ClubDistance = 220.0,
                            ClubName = "4h",
                            UserId = 1
                        },
                        new
                        {
                            ClubId = 4,
                            ClubDistance = 205.0,
                            ClubName = "5i",
                            UserId = 1
                        },
                        new
                        {
                            ClubId = 5,
                            ClubDistance = 195.0,
                            ClubName = "6i",
                            UserId = 1
                        },
                        new
                        {
                            ClubId = 6,
                            ClubDistance = 180.0,
                            ClubName = "7i",
                            UserId = 1
                        },
                        new
                        {
                            ClubId = 7,
                            ClubDistance = 165.0,
                            ClubName = "8i",
                            UserId = 1
                        },
                        new
                        {
                            ClubId = 8,
                            ClubDistance = 150.0,
                            ClubName = "9i",
                            UserId = 1
                        },
                        new
                        {
                            ClubId = 9,
                            ClubDistance = 135.0,
                            ClubName = "Pw",
                            UserId = 1
                        },
                        new
                        {
                            ClubId = 10,
                            ClubDistance = 125.0,
                            ClubName = "Gw",
                            UserId = 1
                        },
                        new
                        {
                            ClubId = 11,
                            ClubDistance = 115.0,
                            ClubName = "Aw",
                            UserId = 1
                        },
                        new
                        {
                            ClubId = 12,
                            ClubDistance = 105.0,
                            ClubName = "Sw",
                            UserId = 1
                        },
                        new
                        {
                            ClubId = 13,
                            ClubDistance = 95.0,
                            ClubName = "Lw",
                            UserId = 1
                        },
                        new
                        {
                            ClubId = 14,
                            ClubDistance = 0.0,
                            ClubName = "Pu",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("GolfCompanion.Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClubName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CourseId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("GolfCompanion.Models.Hole", b =>
                {
                    b.Property<int>("HoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Handicap")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HoleNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Length")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Par")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TeeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("HoleId");

                    b.HasIndex("TeeId");

                    b.ToTable("Holes");
                });

            modelBuilder.Entity("GolfCompanion.Models.Round", b =>
                {
                    b.Property<int>("RoundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("SG_App")
                        .HasColumnType("REAL");

                    b.Property<double>("SG_Putt")
                        .HasColumnType("REAL");

                    b.Property<double>("SG_Short")
                        .HasColumnType("REAL");

                    b.Property<double>("SG_Tee")
                        .HasColumnType("REAL");

                    b.Property<int>("Score")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TeeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("RoundId");

                    b.HasIndex("TeeId");

                    b.HasIndex("UserId");

                    b.ToTable("Rounds");
                });

            modelBuilder.Entity("GolfCompanion.Models.Shot", b =>
                {
                    b.Property<int>("ShotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClubId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Distance")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HoleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Lie")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RoundId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ShotType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("StrokesGained")
                        .HasColumnType("REAL");

                    b.HasKey("ShotId");

                    b.HasIndex("ClubId");

                    b.HasIndex("HoleId");

                    b.HasIndex("RoundId");

                    b.ToTable("Shots");
                });

            modelBuilder.Entity("GolfCompanion.Models.Tee", b =>
                {
                    b.Property<int>("TeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("CourseRating")
                        .HasColumnType("REAL");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Par")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SlopeRating")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TeeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TeeId");

                    b.HasIndex("CourseId");

                    b.ToTable("Tees");
                });

            modelBuilder.Entity("GolfCompanion.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Handicap")
                        .HasColumnType("REAL");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "john_doe@fake.email",
                            FirstName = "John",
                            Handicap = 15.0,
                            LastName = "Doe"
                        });
                });

            modelBuilder.Entity("GolfCompanion.Models.Club", b =>
                {
                    b.HasOne("GolfCompanion.Models.User", "User")
                        .WithMany("Clubs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GolfCompanion.Models.Hole", b =>
                {
                    b.HasOne("GolfCompanion.Models.Tee", "Tee")
                        .WithMany("Holes")
                        .HasForeignKey("TeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tee");
                });

            modelBuilder.Entity("GolfCompanion.Models.Round", b =>
                {
                    b.HasOne("GolfCompanion.Models.Tee", "Tee")
                        .WithMany("Rounds")
                        .HasForeignKey("TeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GolfCompanion.Models.User", "User")
                        .WithMany("Rounds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tee");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GolfCompanion.Models.Shot", b =>
                {
                    b.HasOne("GolfCompanion.Models.Club", "Club")
                        .WithMany("Shots")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GolfCompanion.Models.Hole", "Hole")
                        .WithMany("Shots")
                        .HasForeignKey("HoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GolfCompanion.Models.Round", "Round")
                        .WithMany("Shots")
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club");

                    b.Navigation("Hole");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("GolfCompanion.Models.Tee", b =>
                {
                    b.HasOne("GolfCompanion.Models.Course", "Course")
                        .WithMany("Tees")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("GolfCompanion.Models.Club", b =>
                {
                    b.Navigation("Shots");
                });

            modelBuilder.Entity("GolfCompanion.Models.Course", b =>
                {
                    b.Navigation("Tees");
                });

            modelBuilder.Entity("GolfCompanion.Models.Hole", b =>
                {
                    b.Navigation("Shots");
                });

            modelBuilder.Entity("GolfCompanion.Models.Round", b =>
                {
                    b.Navigation("Shots");
                });

            modelBuilder.Entity("GolfCompanion.Models.Tee", b =>
                {
                    b.Navigation("Holes");

                    b.Navigation("Rounds");
                });

            modelBuilder.Entity("GolfCompanion.Models.User", b =>
                {
                    b.Navigation("Clubs");

                    b.Navigation("Rounds");
                });
#pragma warning restore 612, 618
        }
    }
}
